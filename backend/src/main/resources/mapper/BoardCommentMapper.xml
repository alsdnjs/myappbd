<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="myapp.backend.domain.board.mapper.BoardCommentMapper">
    
    <!-- 댓글 작성 -->
    <insert id="insertComment" parameterType="myapp.backend.domain.board.vo.BoardCommentVO" useGeneratedKeys="true" keyProperty="comment_id">
        INSERT INTO board_comment (user_id, board_id, comment_content, parent_id, uploaded_at)
        VALUES (#{user_id}, #{board_id}, #{comment_content}, #{parent_id}, NOW())
    </insert>
    
    <!-- 게시글의 댓글 목록 조회 (최상위 댓글만) -->
    <select id="getCommentsByBoardId" parameterType="int" resultType="myapp.backend.domain.board.vo.BoardCommentVO">
        SELECT 
            c.comment_id,
            c.user_id,
            c.board_id,
            c.comment_content,
            c.parent_id,
            c.uploaded_at,
            u.username
        FROM board_comment c
        JOIN user u ON c.user_id = u.user_id
        WHERE c.board_id = #{board_id} AND c.parent_id IS NULL
        ORDER BY c.uploaded_at ASC
    </select>
    
    <!-- 특정 댓글의 대댓글 목록 조회 -->
    <select id="getRepliesByParentId" parameterType="int" resultType="myapp.backend.domain.board.vo.BoardCommentVO">
        SELECT 
            c.comment_id,
            c.user_id,
            c.board_id,
            c.comment_content,
            c.parent_id,
            c.uploaded_at,
            u.username
        FROM board_comment c
        JOIN user u ON c.user_id = u.user_id
        WHERE c.parent_id = #{parent_id}
        ORDER BY c.uploaded_at ASC
    </select>
    
    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="myapp.backend.domain.board.vo.BoardCommentVO">
        UPDATE board_comment 
        SET comment_content = #{comment_content}
        WHERE comment_id = #{comment_id} AND user_id = #{user_id}
    </update>
    
    <!-- 댓글 삭제 -->
    <delete id="deleteComment" parameterType="int">
        DELETE FROM board_comment WHERE comment_id = #{comment_id}
    </delete>
    
    <!-- 댓글 작성자 확인 -->
    <select id="findCommentAuthorUserId" parameterType="int" resultType="int">
        SELECT user_id FROM board_comment WHERE comment_id = #{comment_id}
    </select>
    
    <!-- 게시글의 총 댓글 수 조회 -->
    <select id="getCommentCountByBoardId" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM board_comment WHERE board_id = #{board_id}
    </select>
    
    <!-- 대댓글 작성 -->
    <insert id="insertReply" parameterType="myapp.backend.domain.board.vo.BoardCommentVO" useGeneratedKeys="true" keyProperty="comment_id">
        INSERT INTO board_comment (user_id, board_id, comment_content, parent_id, uploaded_at)
        VALUES (#{user_id}, #{board_id}, #{comment_content}, #{parent_id}, NOW())
    </insert>
    

    
    <!-- 게시글의 모든 댓글과 대댓글을 계층 구조로 조회 -->
    <select id="getCommentsWithRepliesByBoardId" parameterType="int" resultType="myapp.backend.domain.board.vo.BoardCommentVO">
        SELECT 
            c.comment_id,
            c.user_id,
            c.board_id,
            c.comment_content,
            c.parent_id,
            c.uploaded_at,
            u.username,
            CASE 
                WHEN c.parent_id IS NOT NULL THEN 'reply'
                ELSE 'comment'
            END as comment_type
        FROM board_comment c
        JOIN user u ON c.user_id = u.user_id
        WHERE c.board_id = #{board_id}
        ORDER BY 
            COALESCE(c.parent_id, c.comment_id) ASC,
            c.parent_id ASC NULLS FIRST,
            c.uploaded_at ASC
    </select>
    
    <!-- 대댓글 수정 -->
    <update id="updateReply" parameterType="myapp.backend.domain.board.vo.BoardCommentVO">
        UPDATE board_comment 
        SET comment_content = #{comment_content}
        WHERE comment_id = #{comment_id} AND user_id = #{user_id} AND parent_id IS NOT NULL
    </update>
    
    <!-- 대댓글 삭제 -->
    <delete id="deleteReply" parameterType="int">
        DELETE FROM board_comment WHERE comment_id = #{comment_id} AND parent_id IS NOT NULL
    </delete>
    
    <!-- 댓글과 대댓글 모두 삭제 (계층 삭제) -->
    <delete id="deleteCommentWithReplies" parameterType="int">
        DELETE FROM board_comment 
        WHERE comment_id = #{comment_id} 
           OR parent_id = #{comment_id}
    </delete>
    
    <!-- 대댓글 작성자 확인 -->
    <select id="findReplyAuthorUserId" parameterType="int" resultType="int">
        SELECT user_id FROM board_comment WHERE comment_id = #{comment_id} AND parent_id IS NOT NULL
    </select>
    
    <!-- 게시글의 총 댓글 수 (대댓글 포함) -->
    <select id="getTotalCommentCountByBoardId" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM board_comment WHERE board_id = #{board_id}
    </select>
    
    <!-- 게시글의 최상위 댓글 수 (대댓글 제외) -->
    <select id="getTopLevelCommentCountByBoardId" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM board_comment WHERE board_id = #{board_id} AND parent_id IS NULL
    </select>
    
</mapper>
