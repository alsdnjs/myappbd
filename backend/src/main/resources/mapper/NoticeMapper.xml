<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="myapp.backend.domain.notice.mapper.NoticeMapper">

    <!-- 공지사항 목록 조회 (사용자용) -->
    <select id="getNoticeList" resultType="myapp.backend.domain.notice.vo.NoticeVO">
        SELECT 
            n.notice_id,
            n.notice_title,
            n.notice_content,
            n.admin_id,
            n.created_at,
            n.updated_at,
            n.is_important,
            n.view_count,
            u.username as admin_username
        FROM notice n
        LEFT JOIN admin a ON n.admin_id = a.admin_id
        LEFT JOIN user u ON a.user_id = u.user_id
        ORDER BY n.is_important DESC, n.created_at DESC
    </select>

    <!-- 공지사항 상세 조회 (사용자용) -->
    <select id="getNoticeDetail" parameterType="int" resultType="myapp.backend.domain.notice.vo.NoticeVO">
        SELECT 
            n.notice_id,
            n.notice_title,
            n.notice_content,
            n.admin_id,
            n.created_at,
            n.updated_at,
            n.is_important,
            n.view_count,
            u.username as admin_username
        FROM notice n
        LEFT JOIN admin a ON n.admin_id = a.admin_id
        LEFT JOIN user u ON a.user_id = u.user_id
        WHERE n.notice_id = #{notice_id}
    </select>

    <!-- 조회수 증가 -->
    <update id="increaseViewCount" parameterType="int">
        UPDATE notice SET view_count = view_count + 1 WHERE notice_id = #{notice_id}
    </update>

    <!-- 공지사항 작성 (관리자용) -->
    <insert id="insertNotice" parameterType="myapp.backend.domain.notice.vo.NoticeVO" useGeneratedKeys="true" keyProperty="notice_id">
        INSERT INTO notice (notice_title, notice_content, admin_id, is_important, created_at, updated_at)
        VALUES (#{notice_title}, #{notice_content}, #{admin_id}, #{is_important,jdbcType=TINYINT}, NOW(), NOW())
    </insert>

    <!-- 공지사항 수정 (관리자용) -->
    <update id="updateNotice" parameterType="myapp.backend.domain.notice.vo.NoticeVO">
        UPDATE notice 
        SET notice_title = #{notice_title}, 
            notice_content = #{notice_content}, 
            is_important = #{is_important,jdbcType=TINYINT}, 
            updated_at = NOW()
        WHERE notice_id = #{notice_id}
    </update>

    <!-- 공지사항 삭제 (관리자용) -->
    <delete id="deleteNotice" parameterType="int">
        DELETE FROM notice WHERE notice_id = #{notice_id}
    </delete>

    <!-- 관리자용 공지사항 목록 조회 -->
    <select id="getAdminNoticeList" resultType="myapp.backend.domain.notice.vo.NoticeVO">
        SELECT 
            n.notice_id,
            n.notice_title,
            n.notice_content,
            n.admin_id,
            n.created_at,
            n.updated_at,
            n.is_important,
            n.view_count,
            u.username as admin_username
        FROM notice n
        LEFT JOIN admin a ON n.admin_id = a.admin_id
        LEFT JOIN user u ON a.user_id = u.user_id
        ORDER BY n.created_at DESC
    </select>

    <!-- 관리자용 공지사항 상세 조회 -->
    <select id="getAdminNoticeDetail" parameterType="int" resultType="myapp.backend.domain.notice.vo.NoticeVO">
        SELECT 
            n.notice_id,
            n.notice_title,
            n.notice_content,
            n.admin_id,
            n.created_at,
            n.updated_at,
            n.is_important,
            n.view_count,
            u.username as admin_username
        FROM notice n
        LEFT JOIN admin a ON n.admin_id = a.admin_id
        LEFT JOIN user u ON a.user_id = u.user_id
        WHERE n.notice_id = #{notice_id}
    </select>

</mapper>
